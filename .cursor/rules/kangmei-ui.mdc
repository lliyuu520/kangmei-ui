---
description: 
globs: 
alwaysApply: true
---
# 康美UI项目开发规范

## 项目概述

康美UI是一个基于 Vue 3 + TypeScript + Vite 的现代化前端项目。

### 技术栈
- Vue 3.2.47
- TypeScript 4.7.4
- Vite 3.2.5
- Element Plus 2.3.1
- Pinia 2.0.30
- Vue Router 4.1.5
- Vue I18n 9.1.9

## 目录结构

```
src/
├── api/          # API 接口定义
├── assets/       # 静态资源
├── components/   # 公共组件
├── hooks/        # 自定义 hooks
├── icons/        # 图标资源
├── i18n/         # 国际化配置
├── layout/       # 布局组件
├── router/       # 路由配置
├── store/        # 状态管理
├── styles/       # 全局样式
├── types/        # TypeScript 类型定义
├── utils/        # 工具函数
└── views/        # 页面组件
```

## 开发规范

### 1. 代码规范

- 使用 ESLint + Prettier 进行代码格式化
- 使用 TypeScript 进行开发
- 遵循 Vue 3 组合式 API 风格
- 使用 ESLint 规则进行代码检查

### 2. 文件命名规范

- 组件文件使用 PascalCase 命名（如：`UserProfile.vue`）
- 工具函数文件使用 camelCase 命名（如：`formatDate.ts`）
- 样式文件使用 kebab-case 命名（如：`main-style.scss`）
- 路由文件使用 kebab-case 命名（如：`user-routes.ts`）

### 3. 组件开发规范

- 组件名使用 PascalCase
- 组件属性使用 kebab-case
- 组件事件使用 kebab-case
- 使用 `<script setup>` 语法
- 使用 TypeScript 类型定义
- 组件必须包含 name 属性
- 组件必须包含注释说明

### 4. API 调用规范

- API 接口统一在 `src/api` 目录下管理
- 使用 axios 进行 HTTP 请求
- 请求方法使用 TypeScript 类型定义
- 统一错误处理
- 使用环境变量配置 API 地址

### 5. 国际化规范

- 使用 vue-i18n 进行国际化
- 语言文件统一在 `src/i18n` 目录下管理
- 使用 TypeScript 类型定义语言包
- 支持中文和英文

### 6. 样式规范

- 使用 SCSS 预处理器
- 遵循 BEM 命名规范
- 使用 CSS 变量管理主题
- 组件样式使用 scoped
- 全局样式在 `src/styles` 目录下管理

### 7. Git 提交规范

- feat: 新功能
- fix: 修复 bug
- docs: 文档更新
- style: 代码格式（不影响代码运行的变动）
- refactor: 重构（既不是新增功能，也不是修改 bug 的代码变动）
- perf: 性能优化
- test: 增加测试
- chore: 构建过程或辅助工具的变动

### 8. 性能优化规范

- 路由懒加载
- 组件按需加载
- 图片资源压缩
- 合理使用缓存
- 避免不必要的重渲染

### 9. 安全规范

- 敏感信息加密
- XSS 防护
- CSRF 防护
- 输入验证
- 权限控制

### 10. 测试规范

- 单元测试
- 组件测试
- E2E 测试
- 测试覆盖率要求

## 开发流程

1. 创建功能分支
2. 开发新功能
3. 提交代码
4. 代码审查
5. 合并到主分支
6. 部署测试环境
7. 测试验证
8. 部署生产环境

## 注意事项

- 遵循 Vue 3 最佳实践
- 保持代码简洁清晰
- 注重代码复用
- 及时更新文档
- 定期代码审查
- 保持依赖更新

# Your rule content

- You can @ files here
- You can use markdown but dont have to
